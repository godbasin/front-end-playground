(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{300:function(v,_,r){"use strict";r.r(_);var t=r(16),e=Object(t.a)({},function(){var v=this,_=v.$createElement,r=v._self._c||_;return r("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[r("p",[v._v("最近在整理一些之前写的比较散的内容，希望可以将一些自己的理解整合成比较有结构和逻辑的内容分享给到大家。本文主要浏览器的页面渲染过程~")]),v._v(" "),r("p",[v._v("作为前端开发，我们的日常工作中除了编码以外，几乎大多数时间都在跟浏览器打交道。因此，我们应该对浏览器的了解要更加深入，掌握它是怎样将我们编写的代码渲染到页面中的。")]),v._v(" "),r("h2",{attrs:{id:"认识浏览器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#认识浏览器","aria-hidden":"true"}},[v._v("#")]),v._v(" 认识浏览器")]),v._v(" "),r("p",[v._v("如今我们在主要使用的浏览器包括：")]),v._v(" "),r("ul",[r("li",[v._v("台式机：Chrome、Internet Explorer、Firefox、Safari、Opera 等")]),v._v(" "),r("li",[v._v("移动设备：Android 浏览器、iPhone、Opera Mini、Opera Mobile、UC 浏览器、Chrome 等。")])]),v._v(" "),r("p",[v._v("上面提到的这些浏览器，除 Opera 以外都是基于 WebKit 内核。")]),v._v(" "),r("h3",{attrs:{id:"浏览器主要功能"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器主要功能","aria-hidden":"true"}},[v._v("#")]),v._v(" 浏览器主要功能")]),v._v(" "),r("p",[v._v("浏览器的主要功能，是通过向服务器请求并在浏览器窗口中展示这些资源内容，这些内容通常包括 HTML 文档、PDF、图像等，我们也可以通过插件的方式加载更多其他的资源类型。")]),v._v(" "),r("p",[v._v("一般来说，我们在浏览器中会用到以下功能：")]),v._v(" "),r("ul",[r("li",[v._v("用于输入 URI 的地址栏")]),v._v(" "),r("li",[v._v("刷新和停止按钮，来控制当前文档的加载")]),v._v(" "),r("li",[v._v("后退和前进按钮，控制文档历史的快速访问")]),v._v(" "),r("li",[v._v("书签和收藏选项")])]),v._v(" "),r("p",[v._v("HTML 和 CSS 规范中规定了浏览器解析和渲染 HTML 文档的方式，曾经各个浏览器都只遵循其中一部分，因此前端开发经常需要兼容各种浏览器。现在这些问题已经得到改善，同时配合 Babel 等一些兼容性处理编译过程，我们可以更加关注网站的功能实现和优化。")]),v._v(" "),r("h3",{attrs:{id:"浏览器的结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的结构","aria-hidden":"true"}},[v._v("#")]),v._v(" 浏览器的结构")]),v._v(" "),r("p",[r("img",{attrs:{src:"https://github-imglib-1255459943.cos.ap-chengdu.myqcloud.com/how-browser-works-1.jpg",alt:""}})]),v._v(" "),r("p",[v._v("如图，从结构上来说，浏览器主要包括了八个子系统：")]),v._v(" "),r("ul",[r("li",[r("strong",[v._v("用户界面")]),v._v("：包括前面提到的用户主要功能地址栏，状态栏和工具栏等")]),v._v(" "),r("li",[r("strong",[v._v("浏览器引擎")]),v._v("：一个可嵌入的组件，它提供了用于查询和操作渲染引擎的高级界面")]),v._v(" "),r("li",[r("strong",[v._v("渲染引擎")]),v._v("：负责显示请求的内容，比如用于对 HTML 文档进行解析和布局，可以选择使用 CSS 样式化")]),v._v(" "),r("li",[r("strong",[v._v("网络子系统")]),v._v("：用于 HTTP 请求之类的网络调用，在独立于平台的界面后面针对不同平台使用不同的实现")]),v._v(" "),r("li",[r("strong",[v._v("JavaScript 解释器")]),v._v("：用于解析和执行 JavaScript 代码")]),v._v(" "),r("li",[r("strong",[v._v("XML 解析器")]),v._v("：用于解析和运行 XML 代码")]),v._v(" "),r("li",[r("strong",[v._v("显示后端")]),v._v("：用于绘制基本小部件和字体，例如组合框和窗口")]),v._v(" "),r("li",[r("strong",[v._v("数据持久性子系统")]),v._v("：即数据存储，该子系统在磁盘上存储与浏览会话相关的各种数据，包括书签，Cookie 和缓存")])]),v._v(" "),r("p",[v._v("这些子系统组合构成了我们的浏览器，而谈到页面的加载和渲染，则离不开网络子系统、渲染引擎、JavaScript 解释器和浏览器引擎等。下面我们以前端开发最常使用的 Chrome 浏览器为例，进行更详细的介绍。")]),v._v(" "),r("blockquote",[r("p",[v._v("Chrome 浏览器相关的内容主要参考"),r("a",{attrs:{href:"https://developers.google.com/web/updates/2018/09/inside-browser-part1",target:"_blank",rel:"noopener noreferrer"}},[v._v("Inside look at modern web browser"),r("OutboundLink")],1),v._v("一文，文章写得特别详细和形象，强烈推荐大家进行阅读。")])]),v._v(" "),r("h4",{attrs:{id:"chrome-多进程架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#chrome-多进程架构","aria-hidden":"true"}},[v._v("#")]),v._v(" Chrome 多进程架构")]),v._v(" "),r("p",[v._v("关于进程和线程的概念，这里不多介绍，这些也都是开发需要掌握的基础内容，大家可以自行进行学习。")]),v._v(" "),r("p",[v._v("Chrome 使用了多进程架构，具有以下进程：")]),v._v(" "),r("p",[r("img",{attrs:{src:"https://github-imglib-1255459943.cos.ap-chengdu.myqcloud.com/how-browser-works-1.png",alt:""}})]),v._v(" "),r("table",[r("thead",[r("tr",[r("th",[v._v("进程")]),v._v(" "),r("th",[v._v("描述")])])]),v._v(" "),r("tbody",[r("tr",[r("td",[v._v("浏览器进程")]),v._v(" "),r("td",[v._v("控制和处理用户可见的 UI 部分（包括地址栏，书签，后退和前进按钮）和用户不可见的隐藏部分（例如网络请求和文件访问）")])]),v._v(" "),r("tr",[r("td",[v._v("渲染器进程")]),v._v(" "),r("td",[v._v("控制显示网站的选项卡中的内容")])]),v._v(" "),r("tr",[r("td",[v._v("插件进程")]),v._v(" "),r("td",[v._v("控制网站使用的插件（例如 Flash）")])]),v._v(" "),r("tr",[r("td",[v._v("GPU 进程")]),v._v(" "),r("td",[v._v("与其他进程隔离地处理 GPU 任务")])])])]),v._v(" "),r("p",[v._v("Chrome 等浏览器支持多个选项卡，每个选项卡在单独的渲染器进程中运行。如果一个选项卡变得无响应，则可以关闭无响应的选项卡并继续运行，同时保持其他选项卡的活动状态。")]),v._v(" "),r("h4",{attrs:{id:"chrome-浏览器进程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#chrome-浏览器进程","aria-hidden":"true"}},[v._v("#")]),v._v(" Chrome 浏览器进程")]),v._v(" "),r("p",[v._v("除了每个选项卡在单独的渲染器进程中运行，选项卡之外的所有内容都由浏览器进程处理。")]),v._v(" "),r("p",[v._v("其中，浏览器进程具有以下线程：")]),v._v(" "),r("ul",[r("li",[r("strong",[v._v("UI 线程")]),v._v("：用于绘制浏览器的按钮和输入字段")]),v._v(" "),r("li",[r("strong",[v._v("网络线程")]),v._v("：用于处理网络请求，以及从服务器接收数据")]),v._v(" "),r("li",[r("strong",[v._v("存储线程")]),v._v("：用于控制对文件的访问")]),v._v(" "),r("li",[r("strong",[v._v("GUI 渲染线程")]),v._v("：负责对浏览器界面进行渲染")]),v._v(" "),r("li",[r("strong",[v._v("JavaScript 引擎线程")]),v._v("：负责解析和执行 JavaScript 脚本")]),v._v(" "),r("li",[r("strong",[v._v("浏览器定时器触发线程")]),v._v("："),r("code",[v._v("setTimeout")]),v._v("和"),r("code",[v._v("setInterval")]),v._v("所在的线程")]),v._v(" "),r("li",[r("strong",[v._v("浏览器事件触发线程")]),v._v("：该线程负责处理浏览器事件，并将事件触发后需要执行的代码放置到 JavaScript 引擎中执行")])]),v._v(" "),r("p",[v._v("这些线程在我们的基本认知和日常开发中多少有些了解，包括：")]),v._v(" "),r("ul",[r("li",[v._v("页面的加载过程，涉及 GUI 渲染线程与 JavaScript 引擎线程间的互斥关系")]),v._v(" "),r("li",[v._v("Event Loop 中对事件的处理，涉及浏览器事件触发线程、浏览器事件触发线程、非阻塞设计的 JavaScript 引擎线程")]),v._v(" "),r("li",[v._v("网络请求，涉及网络线程的处理过程（包括 DNS 解析、TCP 建连、HTTP 建立等等）")])]),v._v(" "),r("p",[v._v("下面我们来介绍浏览器中页面加载和渲染过程。")]),v._v(" "),r("h2",{attrs:{id:"浏览器中页面的加载和渲染"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器中页面的加载和渲染","aria-hidden":"true"}},[v._v("#")]),v._v(" 浏览器中页面的加载和渲染")]),v._v(" "),r("p",[v._v("这里我们将基于 Chrome 浏览器，更加详细地介绍浏览器进程和线程如何通信来显示页面，主要分为两部分：")]),v._v(" "),r("ul",[r("li",[v._v("页面导航：用户输入 URL，浏览器进程进行请求和准备处理")]),v._v(" "),r("li",[v._v("页面渲染：获取到相关资源后，渲染器进程负责选项卡内部的渲染处理")])]),v._v(" "),r("h3",{attrs:{id:"页面导航"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#页面导航","aria-hidden":"true"}},[v._v("#")]),v._v(" 页面导航")]),v._v(" "),r("p",[v._v("在地址栏中输入内容时，浏览器会进行：")]),v._v(" "),r("ol",[r("li",[v._v("首先由浏览器进程的 UI 线程进行处理。如果是 URI，UI 线程会发起网络请求来获取网站内容；如果不是，则进入搜索引擎。")]),v._v(" "),r("li",[v._v("请求过程由网络线程来完成（下面会简单描述一个 HTTP 请求过程）。如果响应是 HTML 文件，则是将数据传递到渲染器进程；如果是其他文件，则意味着这是下载请求，此时会将数据传递到下载管理器。")]),v._v(" "),r("li",[v._v("确认浏览器应导航到请求站点后，网络线程通知 UI 线程数据准备就绪。")]),v._v(" "),r("li",[v._v("UI 线程寻找一个渲染器进程来进行网页渲染，数据和渲染器进程都准备好后，HTML 数据通过 IPC 从浏览器进程传递到渲染器进程中。")]),v._v(" "),r("li",[v._v("渲染器进程接收 HTML 数据后，将开始加载资源并渲染页面。")]),v._v(" "),r("li",[v._v("渲染器进程完成渲染后，通过 IPC 通知浏览器进程页面已加载。")])]),v._v(" "),r("blockquote",[r("p",[v._v("其中，一个 HTTP 请求过程如下：")]),v._v(" "),r("ol",[r("li",[v._v("DNS 域名解析（此处涉及 DNS 的寻址过程），找到网页的存放服务器。")]),v._v(" "),r("li",[v._v("浏览器与服务器建立 TCP 连接。")]),v._v(" "),r("li",[v._v("浏览器发起 HTTP 请求。")]),v._v(" "),r("li",[v._v("服务器响应 HTTP 请求，返回对应的资源内容。")])])]),v._v(" "),r("p",[v._v("以上是用户在地址栏输入网站地址，到页面开始渲染的整体过程。如果当前页面跳转到其他网站，浏览器将调用一个单独的渲染进程来处理新导航，同时保留当前渲染进程来处理像"),r("code",[v._v("unload")]),v._v("这类事件。")]),v._v(" "),r("h3",{attrs:{id:"页面加载"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#页面加载","aria-hidden":"true"}},[v._v("#")]),v._v(" 页面加载")]),v._v(" "),r("p",[v._v("浏览器在加载页面的时候会用到 GUI 渲染线程和 Javascript 引擎线程。GUI 渲染线程负责渲染浏览器界面 HTML 元素，Javascript 引擎线程主要负责处理 Javascript 脚本程序，它们之间是互斥的关系，当 Javascript 引擎执行时 GUI 线程会被挂起。")]),v._v(" "),r("p",[v._v("因此，正常的网页渲染流程是这样的：")]),v._v(" "),r("ol",[r("li",[v._v("浏览器一边下载 HTML 网页，一边开始解析。")]),v._v(" "),r("li",[v._v("解析过程中，发现"),r("code",[v._v("<script>")]),v._v("标签。")]),v._v(" "),r("li",[v._v("暂停解析，网页渲染的控制权转交给 Javascript 引擎线程。")]),v._v(" "),r("li",[v._v("如果"),r("code",[v._v("<script>")]),v._v("标签引用了外部脚本，就下载该脚本，否则就直接执行。")]),v._v(" "),r("li",[v._v("执行完毕，控制权交还渲染器进程，恢复往下解析"),r("code",[v._v("HTML")]),v._v("网页。")])]),v._v(" "),r("p",[v._v("浏览器需要在解析到"),r("code",[v._v("<body>")]),v._v("标签的时候才开始渲染页面，因此把 Javascript 放在"),r("code",[v._v("<head>")]),v._v("里，意味着必须把所有 Javascript 代码都下载、解析和解释完成后，才能开始渲染页面。")]),v._v(" "),r("p",[v._v("如果外部脚本加载时间很长（比如一直无法完成下载），就会造成网页长时间失去响应，浏览器就会呈现“假死”状态，用户体验会变得很糟糕。因此，我们常常将 Javascript 放在"),r("code",[v._v("<body>")]),v._v("的最后面，可以避免资源阻塞，页面得以迅速展示。当然，我们还可以使用"),r("code",[v._v("document.write()")]),v._v("API，或者是"),r("code",[v._v("defer")]),v._v("/"),r("code",[v._v("async")]),v._v("/"),r("code",[v._v("preload")]),v._v("等属性来标记"),r("code",[v._v("<script>")]),v._v("标签，来控制 Javascript 的加载顺序。")]),v._v(" "),r("p",[v._v("除此之外，浏览器在渲染页面的过程需要解析 HTML、CSS 得到 DOM 树和 CSS 规则树，它们结合才生成最终的渲染树并渲染。因此，我们还常常将 CSS 放在"),r("code",[v._v("<head>")]),v._v("里，可用来避免浏览器渲染的重复计算。")]),v._v(" "),r("p",[v._v("下面我们来介绍页面渲染过程。")]),v._v(" "),r("h3",{attrs:{id:"页面渲染"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#页面渲染","aria-hidden":"true"}},[v._v("#")]),v._v(" 页面渲染")]),v._v(" "),r("p",[v._v("渲染器进程负责选项卡内部发生的所有事情，它的核心工作是将 HTML、CSS 和 JavaScript 转换为可交互的页面，因此会解析以下内容：")]),v._v(" "),r("ul",[r("li",[v._v("渲染引擎解析 HTML/SVG/XHTML 文件，解析这三种文件会产生一个 DOM 节点树")]),v._v(" "),r("li",[v._v("渲染引擎解析 CSS，会产生 CSS 规则树")]),v._v(" "),r("li",[v._v("JavaScript 解释器解析 Javascript 脚本，Javascript 脚本可以通过 DOM API 和 CSSOM API 来操作 DOM 节点树和 CSS 规则树")])]),v._v(" "),r("p",[v._v("解析完成后，浏览器引擎会通过 DOM 节点树和 CSS 规则树来构造渲染树（Render Tree）。在这个过程中，像"),r("code",[v._v("header")]),v._v("或"),r("code",[v._v("display:none")]),v._v("的元素，它们会存在 DOM 节点树中，但不会被添加到渲染树里。大致流程如下图：")]),v._v(" "),r("p",[r("img",{attrs:{src:"https://github-imglib-1255459943.cos.ap-chengdu.myqcloud.com/flow.png",alt:"浏览器构造渲染树流程"}})]),v._v(" "),r("p",[v._v("渲染的流程基本上如下：")]),v._v(" "),r("ol",[r("li",[r("strong",[v._v("解析(Parser)")]),v._v("：构建渲染树。")]),v._v(" "),r("li",[r("strong",[v._v("布局(Layout)")]),v._v("：定位坐标和大小、是否换行、各种"),r("code",[v._v("position")]),v._v("/"),r("code",[v._v("overflow")]),v._v("/"),r("code",[v._v("z-index")]),v._v("属性等计算。")]),v._v(" "),r("li",[r("strong",[v._v("绘制(Paint)")]),v._v("：判断元素渲染层级顺序。")]),v._v(" "),r("li",[r("strong",[v._v("光栅化(Raster)")]),v._v("：将计算后的信息转换为屏幕上的像素。")])]),v._v(" "),r("p",[v._v("合成器和光栅线程也运行在渲染器进程内部，来高效、流畅地渲染页面。")]),v._v(" "),r("h4",{attrs:{id:"页面布局"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#页面布局","aria-hidden":"true"}},[v._v("#")]),v._v(" 页面布局")]),v._v(" "),r("p",[v._v("渲染的过程中会触发重绘（Repaint）和重排（Reflow）：")]),v._v(" "),r("ul",[r("li",[v._v("重绘：屏幕的一部分要重画，比如某个 CSS 的背景色变了，但是元素的几何尺寸没有变")]),v._v(" "),r("li",[v._v("重排：元素的几何尺寸变了（渲染树的一部分或全部发生了变化），需要重新验证并计算渲染树")])]),v._v(" "),r("p",[v._v("为了不对每个小的变化都进行完整的布局计算，渲染器会将更改的元素和它的子元素进行脏位标记，表示该元素需要重新布局。其中，全局样式更改会触发全局布局，部分样式或元素更改会触发增量布局，增量布局是异步完成的，全局布局则会同步触发。")]),v._v(" "),r("p",[v._v("重排需要涉及变更的所有的结点几何尺寸和位置，成本比重绘的成本高得多的多。所以我们要注意以避免频繁地进行增加、删除、修改 DOM 结点、移动 DOM 的位置、Resize 窗口、滚动等操作，因为可能会导致性能降低。")]),v._v(" "),r("p",[v._v("如果要设置动画元素，浏览器必须在每帧之间运行这些操作。我们的大多数显示器每秒刷新屏幕 60 次（"),r("code",[v._v("60 fps")]),v._v("）。当我们在每一帧中在屏幕上移动物体时，动画将对人眼显得平滑。但是，如果动画错过了它们之间的帧，则页面会变得卡顿不连续。")]),v._v(" "),r("p",[v._v("由于 GUI 渲染线程和 Javascript 引擎线程是互斥的，当我们的网页在运行 JavaScript 时，渲染操作可能会被阻止，动画则无法流畅运行。因此，我们可以将 JavaScript 操作分成小块，并计划使用在每个帧上运行"),r("code",[v._v("requestAnimationFrame()")]),v._v("。")]),v._v(" "),r("h4",{attrs:{id:"光栅化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#光栅化","aria-hidden":"true"}},[v._v("#")]),v._v(" 光栅化")]),v._v(" "),r("p",[v._v("通过解析、计算和布局过程，浏览器获得了文档的结构、每个元素的样式、绘制顺序等信息。将这些信息转换为屏幕上的像素，这个过程被称为光栅化。")]),v._v(" "),r("p",[v._v("光栅化可以被 GPU 加速，光栅化后的位图会被存储在 GPU 内存中。根据前面介绍的渲染流程，当页面布局变更了会触发重排和重绘，还需要重新进行光栅化。此时如果页面中有动画，则主线程中过多的计算任务很可能会影响动画的性能。")]),v._v(" "),r("p",[v._v("因此，现代的浏览器通常使用合成的方式，将页面的各个部分分成若干层，分别对其进行栅格化（将它们分割成了不同的瓦片），并通过合成器线程进行页面的合成。")]),v._v(" "),r("p",[r("img",{attrs:{src:"https://github-imglib-1255459943.cos.ap-chengdu.myqcloud.com/how-browser-works-2.jpg",alt:""}})]),v._v(" "),r("p",[v._v("过程如下：")]),v._v(" "),r("ol",[r("li",[v._v("当主线程创建了合成层并确定了绘制顺序，便将这些信息提交给合成线程。")]),v._v(" "),r("li",[v._v("合成器线程将每个图层栅格化，然后将每个图块发送给光栅线程。")]),v._v(" "),r("li",[v._v("光栅线程栅格化每个瓦片，并将它们存储在 GPU 内存中。")]),v._v(" "),r("li",[v._v("合成器线程通过 IPC 提交给浏览器进程，这些合成器帧被发送到 GPU 进程处理，并显示在屏幕上。")])]),v._v(" "),r("p",[r("img",{attrs:{src:"https://github-imglib-1255459943.cos.ap-chengdu.myqcloud.com/how-browser-works-2.png",alt:""}})]),v._v(" "),r("p",[v._v("合成的真正目的是，在移动合成层的时候不用重新光栅化。因为有了合成器线程，页面才可以独立于主线程进行流畅的滚动。")]),v._v(" "),r("p",[v._v("到此，我们的页面便渲染完成。")]),v._v(" "),r("h3",{attrs:{id:"事件处理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#事件处理","aria-hidden":"true"}},[v._v("#")]),v._v(" 事件处理")]),v._v(" "),r("p",[v._v("当用户与浏览器进行交互时，浏览器进程将首先接收事件。")]),v._v(" "),r("p",[v._v("但是，浏览器进程只知道该事件发生在哪里，因为选项卡内部的内容由渲染器进程处理。因此，浏览器进程将事件类型（如"),r("code",[v._v("click")]),v._v("）及其坐标发送给渲染器进程。渲染器进程通过找到事件目标并运行附加的事件侦听器来适当地处理事件。")]),v._v(" "),r("p",[v._v("基于前面我们提到浏览器有合成层，那么如果将某些事件侦听器添加到页面上怎么办？合成器线程怎么知道某个事件是否需要处理呢：")]),v._v(" "),r("ol",[r("li",[v._v("在合成页面时，合成器线程会将页面上具有事件处理程序的区域标记为“非快速可滚动区域”。")]),v._v(" "),r("li",[v._v("如果事件发生在该区域中，则合成器线程可以确保将输入事件发送到主线程。")]),v._v(" "),r("li",[v._v("如果输入事件来自该区域之外，则合成器线程将在不等待主线程的情况下进行新帧的合成。")])]),v._v(" "),r("p",[v._v("这会带来什么问题呢？由于事件冒泡的机制，我们常常会使用事件委托的方式，在父类元素添加事件侦听器。有时候为了方便，我们会直接在"),r("code",[v._v("document.body")]),v._v("上进行事件委托。")]),v._v(" "),r("p",[v._v("在这种情况下，整个页面都被标记为不可快速滚动的区域。这意味着，即使我们的页面不关心某些部分的用户交互，合成器线程也必须与主线程进行通信，并在每次事件发生时进行等待。")]),v._v(" "),r("p",[v._v("在这种情况下，我们可以使用"),r("code",[v._v("passive: true")]),v._v("选项：这表示我们仍要在主线程中侦听事件，但是合成器也可以继续合成新的框架。")]),v._v(" "),r("p",[v._v("以上，我们基于 Chrome 浏览器进行了详细的浏览器页面渲染的过程，如果想要了解各个浏览器内核之间的渲染差异，可以查看"),r("a",{attrs:{href:"https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/",target:"_blank",rel:"noopener noreferrer"}},[v._v("How Browsers Work: Behind the scenes of modern web browsers"),r("OutboundLink")],1),v._v("这篇文章。")]),v._v(" "),r("h3",{attrs:{id:"参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考","aria-hidden":"true"}},[v._v("#")]),v._v(" 参考")]),v._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/",target:"_blank",rel:"noopener noreferrer"}},[v._v("How Browsers Work: Behind the scenes of modern web browsers"),r("OutboundLink")],1)]),v._v(" "),r("li",[r("a",{attrs:{href:"https://developers.google.com/web/updates/2018/09/inside-browser-part1",target:"_blank",rel:"noopener noreferrer"}},[v._v("Inside look at modern web browser"),r("OutboundLink")],1)])]),v._v(" "),r("h2",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),r("p",[v._v("最近文章写得不那么频繁，一年总有那么几个月就是酱紫的啦~\n有时候也要给自己一点空间和时间，允许自己有些事情没做好、有些结果不如预期，不要过于在意一两次、一两年的成果呢~")])])},[],!1,null,null,null);_.default=e.exports}}]);