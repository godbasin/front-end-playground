(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{331:function(t,s,a){"use strict";a.r(s);var n=a(16),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("前端框架日新月异，而其中的数据绑定已经作为一个框架最基础的功能。我们常常使用的单向绑定、双向绑定、事件绑定、样式绑定等，里面具体怎么实现，而当我们数据变动的时候又会触发怎样的底部流程呢？")]),t._v(" "),a("h1",{attrs:{id:"模板数据绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板数据绑定","aria-hidden":"true"}},[t._v("#")]),t._v(" 模板数据绑定")]),t._v(" "),a("p",[t._v("数据绑定的过程其实不复杂：")]),t._v(" "),a("ol",[a("li",[t._v("解析语法生成 AST。")]),t._v(" "),a("li",[t._v("根据 AST 结果生成 DOM。")]),t._v(" "),a("li",[t._v("将数据绑定更新至模板。")])]),t._v(" "),a("h2",{attrs:{id:"解析语法生成-ast"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解析语法生成-ast","aria-hidden":"true"}},[t._v("#")]),t._v(" 解析语法生成 AST")]),t._v(" "),a("p",[t._v("抽象语法树（Abstract Syntax Tree）也称为 AST 语法树，指的是源代码语法所对应的树状结构。也就是说，对于一种具体编程语言下的源代码，通过构建语法树的形式将源代码中的语句映射到树中的每一个节点上。")]),t._v(" "),a("p",[t._v("其实我们的 DOM 结构树，也是 AST 的一种，把 HTML DOM 语法解析并生成最终的页面。而模板引擎中常用的，则是将模板语法解析生成 HTML DOM。")]),t._v(" "),a("h3",{attrs:{id:"捕获特定语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#捕获特定语法","aria-hidden":"true"}},[t._v("#")]),t._v(" 捕获特定语法")]),t._v(" "),a("p",[t._v("生成 AST 的过程涉及到编译器的原理，一般经过以下过程：")]),t._v(" "),a("ol",[a("li",[t._v("语法分析。")])]),t._v(" "),a("p",[t._v("语法分析的任务是在词法分析的基础上将单词序列组合成各类语法短语，如“程序”，“语句”，“表达式”等等。\n语法分析程序判断源程序在结构上是否正确，源程序的结构由上下文无关文法描述。语法分析程序可以用 YACC 等工具自动生成。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("语义分析")])]),t._v(" "),a("p",[t._v("语义分析是编译过程的一个逻辑阶段，语义分析的任务是对结构上正确的源程序进行上下文有关性质的审查，进行类型审查。语义分析是审查源程序有无语义错误，为代码生成阶段收集类型信息。\n一般类型检查也会在这个过程中进行。")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("生成 AST。")])]),t._v(" "),a("p",[t._v("AST 的结构则根据使用者需要定义，下面的一些对象都是本人根据需要假设定义的。")]),t._v(" "),a("h3",{attrs:{id:"dom-元素捕获"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom-元素捕获","aria-hidden":"true"}},[t._v("#")]),t._v(" DOM 元素捕获")]),t._v(" "),a("p",[t._v("最简单的，我们来捕获一个"),a("code",[t._v("<div>")]),t._v("元素，然后生成一个"),a("code",[t._v("<div>")]),t._v("元素。")]),t._v(" "),a("p",[t._v("例如我们可以将以下这样的 DOM 进行捕获：")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("123"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("456"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("789"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("捕获后我们或许可以得到这样的一个对象：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("thisDiv "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  dom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dom"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    ele"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"div"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    nodeIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dom"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        ele"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        nodeIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dom"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        ele"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"p"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        nodeIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dom"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            ele"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"span"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            nodeIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"456"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"789"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("原本就是一个"),a("code",[t._v("<div>")]),t._v("，经过 AST 生成一个对象，最终还是生成一个"),a("code",[t._v("<div>")]),t._v("，这是多余的步骤吗？不是的，在这个过程中我们可以实现一些功能：")]),t._v(" "),a("ol",[a("li",[t._v("排除无效 DOM 元素，并在构建过程可进行报错。")]),t._v(" "),a("li",[t._v("使用自定义组件的时候，可匹配出来。")]),t._v(" "),a("li",[t._v("可方便地实现数据绑定、事件绑定等功能。")]),t._v(" "),a("li",[t._v("为虚拟"),a("code",[t._v("DOM Diff")]),t._v("过程打下铺垫。")])]),t._v(" "),a("h3",{attrs:{id:"数据绑定捕获"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据绑定捕获","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据绑定捕获")]),t._v(" "),a("p",[t._v("这里我们拿来做例子的是，在 Angular 和 Vue 里面都有，是双大括号的数据绑定"),a("code",[t._v(t._s(t.data))]),t._v("的语法。")]),t._v(" "),a("p",[t._v("在前面 DOM 元素捕获的基础上，我们来添加数据绑定：")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("{{ data }}"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("这么一个简单的数据，我们可以获得这样一个对象：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("thisDiv "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  dom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dom"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    ele"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"div"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    nodeIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  binding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dom"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nodeIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" valueName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"data"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这样，我们在生成一个 DOM 的时候，同时添加对"),a("code",[t._v("data")]),t._v("的监听，数据更新时我们会找到对应的"),a("code",[t._v("nodeIndex")]),t._v("，更新值：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 假设这是一个生成DOM的过程，包括数据绑定和")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateDOM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("astObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" dom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" binding "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" astObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生成DOM，这里假装当前节点是baseDom")]),t._v("\n  baseDom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDOMString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于数据绑定的，来进行监听更新吧")]),t._v("\n  baseDom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"data:change"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 寻找匹配的数据绑定")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" binding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("valueName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若找到值绑定的对应节点，则更新其值。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      baseDom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('`[data-node-index="')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nodeIndex"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"]`')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取DOM字符串，这里简单拼成字符串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDOMString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("domObj")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无效对象返回''")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("domObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" children "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nodeIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ele"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" domObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dom"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若有子对象，递归返回生成的字符串拼接")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" childString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      childString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDOMString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dom对象，拼接生成对象字符串")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("`<")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("ele"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(' data-node-index="')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("nodeIndex"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('">')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("childString"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("</")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("ele"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(">`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若为textNode，返回text的值")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("我们来对上面的代码进行说明。")]),t._v(" "),a("p",[a("strong",[t._v("1. 根据节点信息生成对应的"),a("code",[t._v("HTML string")]),t._v("，也即"),a("code",[t._v("getDOMString()")]),t._v("方法。")])]),t._v(" "),a("p",[t._v("这里我们只是简单完成了一种实现方式，根据节点生成 DOM 也有其他方式，例如使用"),a("code",[t._v(".createElement()")]),t._v("、"),a("code",[t._v(".appendChild()")]),t._v("、"),a("code",[t._v("textContent")]),t._v("等等。")]),t._v(" "),a("p",[t._v("我们称通过生成"),a("code",[t._v("HTML string")]),t._v("的方式为"),a("strong",[t._v("字符串模版")]),t._v("，同时我们将通过"),a("code",[t._v("createElement()/appendChild()")]),t._v("的方式生成 DOM 称为"),a("strong",[t._v("节点模版")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("2. 通过监听数据变更，同时根据绑定的数值获取对应节点，并进行局部更新。")])]),t._v(" "),a("p",[t._v("在使用字符串模版的时候，我们将"),a("code",[t._v("nodeIndex")]),t._v("绑定在元素属性上，主要是用于数据更新时追寻节点进行内容更新。\n在使用节点模版的时候，我们可在创建节点的时候，将该节点保存下来，直接用于数据更新。")]),t._v(" "),a("p",[t._v("当然，即使在字符串模版，我们也可以遍历一遍"),a("code",[t._v("binding")]),t._v("来获取所有绑定数据的节点并保存，这样就不用每次数据更新事件触发的时候重新进行获取，毕竟 DOM 节点的匹配也是会有一定的消耗的。")]),t._v(" "),a("p",[a("strong",[t._v("3. 无论是数据还是事件、属性、样式等的绑定，都可以通过相似的方法进行。")])]),t._v(" "),a("p",[t._v("虽然这里我们只介绍了数据的绑定，但其实事件的绑定、属性和样式的绑定都可以用相似的方式进行，当然事件监听和事件的触发都是我们自己定义的，对于传递的内容都可以用自己想要的方式来传。")]),t._v(" "),a("h2",{attrs:{id:"ast-生成模版"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ast-生成模版","aria-hidden":"true"}},[t._v("#")]),t._v(" AST 生成模版")]),t._v(" "),a("h3",{attrs:{id:"生成模版的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成模版的方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 生成模版的方法")]),t._v(" "),a("p",[t._v("我们在捕获得到一个 AST 树结构后，会将其生成对应的 DOM。一般来说我们有这些方式：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("字符串模版：使用拼接的方式生成 DOM 字符串，直接通过"),a("code",[t._v("innderHTML()")]),t._v("插入页面。")])]),t._v(" "),a("li",[a("strong",[t._v("节点模版：使用"),a("code",[t._v("createElement()/appendChild()/textContent")]),t._v("等方法，动态地插入 DOM 节点，根节点使用"),a("code",[t._v("appendChild()")]),t._v("插入页面。")])]),t._v(" "),a("li",[a("strong",[t._v("混合模版：使用"),a("code",[t._v("createElement()/appendChild()/textContent")]),t._v("等方法动态地插入 DOM 节点，但是根节点使用"),a("code",[t._v("innderHTML()")]),t._v("插入页面。")])])]),t._v(" "),a("p",[t._v("这几个有什么区别呢？")]),t._v(" "),a("p",[t._v("刚开始的时候，我们每次更新页面数据和状态，通常通过"),a("code",[t._v("innerHTML")]),t._v("方法来用新的"),a("code",[t._v("HTML String")]),t._v("替换旧的，这种方法写起来很简单，无非是将各种节点使用字符串的方式拼接起来而已。但是如果我们更新的节点范围比较大，这时候我们需要替换掉很大一片的"),a("code",[t._v("HTML String")]),t._v("。")]),t._v(" "),a("p",[t._v("对于浏览器，这样的一次"),a("code",[t._v("HTML String")]),t._v("替换并不只是更新一些字符串那么简单。")]),t._v(" "),a("h3",{attrs:{id:"浏览器的渲染机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的渲染机制","aria-hidden":"true"}},[t._v("#")]),t._v(" 浏览器的渲染机制")]),t._v(" "),a("p",[t._v("浏览器的一次页面渲染其实开销并不小，首先浏览器会解析三种文件：")]),t._v(" "),a("ul",[a("li",[t._v("解析"),a("code",[t._v("HTML/SVG/XHTML")]),t._v("，会生成一个"),a("code",[t._v("DOM结构树")])]),t._v(" "),a("li",[t._v("解析"),a("code",[t._v("CSS")]),t._v("，会生成一个"),a("code",[t._v("CSS规则树")])]),t._v(" "),a("li",[t._v("解析"),a("code",[t._v("JS")]),t._v("，可通过"),a("code",[t._v("DOM API")]),t._v("和"),a("code",[t._v("CSS API")]),t._v("来操作"),a("code",[t._v("DOM结构树")]),t._v("和"),a("code",[t._v("CSS规则树")])])]),t._v(" "),a("p",[a("code",[t._v("CSS规则树")]),t._v("与"),a("code",[t._v("DOM结构树")]),t._v("结合，最终生成一个"),a("code",[t._v("Render树")]),t._v("（即最终呈现的页面，例如其中会移除"),a("code",[t._v("DOM结构树")]),t._v("中匹配到"),a("code",[t._v("CSS")]),t._v("里面"),a("code",[t._v("display:none;")]),t._v("的 DOM 节点）。其中，"),a("code",[t._v("CSS")]),t._v("匹配 DOM 结构的过程是很复杂的，曾经在机器配置不高的日子也会出现过性能问题。")]),t._v(" "),a("p",[t._v("**一般来说浏览器绘制页面的过程是：1.计算"),a("code",[t._v("CSS规则树")]),t._v(" => 2.生成"),a("code",[t._v("Render树")]),t._v(" => 3.计算各个节点的"),a("code",[t._v("大小")]),t._v("/"),a("code",[t._v("position")]),t._v("/"),a("code",[t._v("z-index")]),t._v(" => 4.绘制。**其中计算的环节也是消耗较大的地方。")]),t._v(" "),a("p",[t._v("我们使用"),a("code",[t._v("DOM API")]),t._v("和"),a("code",[t._v("CSS API")]),t._v("的时候，通常会触发浏览器的两种操作："),a("code",[t._v("Repaint")]),t._v("和"),a("code",[t._v("Reflow")]),t._v("。")]),t._v(" "),a("p",[t._v("**Repaint：页面部分重画，通常不涉及尺寸的改变，常见于颜色的变化。**这时候一般只触发绘制过程的第 4 个步骤。")]),t._v(" "),a("p",[t._v("**Reflow：意味着节点需要重新计算和绘制，常见于尺寸的改变。**这时候会触发 3 和 4 两个步骤。")]),t._v(" "),a("p",[t._v("所以我们在写页面的时候会注意一些问题，例如不要一条一条地修改 DOM 的样式（会触发多次的计算或绘制），在写动画的时候多使用"),a("code",[t._v("fixed")]),t._v("/"),a("code",[t._v("absolute")]),t._v("等（"),a("code",[t._v("Reflow")]),t._v("的范围小），等等。")]),t._v(" "),a("p",[t._v("回到话题，如果我们直接每次更新页面数据和状态，都使用"),a("code",[t._v("innerHTML")]),t._v("的方式，无疑会增加浏览器的负担，所以需要跟踪节点进行局部跟新。当然，"),a("code",[t._v("innerHTML")]),t._v("也有它的优势，那就是我们可以使用一个"),a("code",[t._v("innerHTML")]),t._v("替代很多很多的"),a("code",[t._v("createElement()/appendChild()/textContent")]),t._v("方法，这在我们较少使用数据绑定和更新的情况下高效得多。")]),t._v(" "),a("h1",{attrs:{id:"模版数据更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模版数据更新","aria-hidden":"true"}},[t._v("#")]),t._v(" 模版数据更新")]),t._v(" "),a("p",[t._v("我们讲了模版生成 AST，以及通过 AST 生成 DOM、并进行数据绑定的过程，接下来说明下模版数据更新的过程。")]),t._v(" "),a("h3",{attrs:{id:"数据更新监听"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据更新监听","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据更新监听")]),t._v(" "),a("p",[t._v("前面将数据绑定的时候，也讲了使用"),a("strong",[t._v("事件监听")]),t._v("的方式监听数据更新。这里接着介绍一些其他的方式。")]),t._v(" "),a("p",[a("strong",[t._v("脏检测：在 Angular 中，并不直接监听数据的变动，而是监听常见的事件如用户交互（点击、输入等）、定时器、生命周期等。在每次事件触发完毕后，计算数据的新值和旧值是否有差异，若有差异则更新页面，并触发下一次的脏检测，直到没有差异或是次数达到设定阈值。")])]),t._v(" "),a("p",[t._v("脏检测是 Angular 的一大特色。由于事件触发的时候，并不能知道哪些数据会有变化，所以会进行大面积数据的新旧值 Diff，这也毫无疑问会导致一些性能问题。在 Angular2 版本之后，由于使用了"),a("code",[t._v("zone.js")]),t._v("对异步任务进行跟踪，把这个计算放进 worker，完了更新回主线程，是个类似多线程的设计，也提升了性能。")]),t._v(" "),a("p",[t._v("同时，在 Angular2 中应用的组织类似 DOM，也是树结构的，脏检查会从根组件开始，自上而下对树上的所有子组件进行检查。相比 Angular1 中的带有环的结构，这样的单向数据流效率更高，而且容易预测。")]),t._v(" "),a("p",[a("strong",[t._v("Getter/Setter：在 Vue 中，主要是使用"),a("code",[t._v("Proxy")]),t._v("的方式，在相关的数据写入时进行模版更新。")])]),t._v(" "),a("p",[a("strong",[t._v("手动 Function：在 React 中，通过手动调用"),a("code",[t._v("set()")]),t._v("的方式写入数据来更新模版。")])]),t._v(" "),a("p",[t._v("使用"),a("code",[t._v("Proxy")]),t._v("或者是"),a("code",[t._v("set()")]),t._v("的时候，我们可以通过"),a("code",[t._v("event emit")]),t._v("或是"),a("code",[t._v("callback")]),t._v("回调的方法，来触发数据的计算以及模版的更新。")]),t._v(" "),a("h3",{attrs:{id:"数据更新-diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据更新-diff","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据更新 Diff")]),t._v(" "),a("p",[t._v("说到数据更新的 Diff，更多的则是"),a("code",[t._v("Diff + 更新模板")]),t._v("这样一个过程。")]),t._v(" "),a("p",[t._v("在这个过程中，最突出的也就是虚拟 DOM，它解决了常见的局部数据更新的问题，例如数组中值位置的调换、部分更新。一般来说计算过程如下：")]),t._v(" "),a("p",[a("strong",[t._v("1. 用 JS 对象模拟 DOM 树。")])]),t._v(" "),a("p",[t._v("不知道大家仔细研究过 DOM 节点对象没，一个真正的 DOM 元素非常庞大，拥有很多的属性值。而其中很多的属性对于计算过程来说是不需要的，所以我们的第一步就是简化 DOM 对象。\n我们用一个"),a("code",[t._v("JavaScript")]),t._v("对象结构表示 DOM 树的结构，然后用这个树构建一个真正的 DOM 树。")]),t._v(" "),a("p",[a("strong",[t._v("2. 比较两棵虚拟 DOM 树的差异。")])]),t._v(" "),a("p",[t._v("当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异。通常来说这样的差异需要记录：")]),t._v(" "),a("ul",[a("li",[t._v("需要替换掉原来的节点")]),t._v(" "),a("li",[t._v("移动、删除、新增子节点")]),t._v(" "),a("li",[t._v("修改了节点的属性")]),t._v(" "),a("li",[t._v("对于文本节点的文本内容改变")])]),t._v(" "),a("p",[t._v("经过差异对比之后，我们能获得一组差异记录，接下里我们需要使用它。")]),t._v(" "),a("p",[a("strong",[t._v("3. 把差异应用到真正的 DOM 树上。")])]),t._v(" "),a("p",[t._v("对差异记录要应用到真正的 DOM 树上，例如节点的替换、移动、删除，文本内容的改变等。")]),t._v(" "),a("h1",{attrs:{id:"结束语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结束语","aria-hidden":"true"}},[t._v("#")]),t._v(" 结束语")]),t._v(" "),a("p",[t._v("总的来说，一个前端模板引擎大致分为"),a("code",[t._v("模板生成AST => AST生成模板 => 数据/事件/属性绑定的监听 => 数据变更Diff => 局部更新模板")]),t._v("这些过程。当然上面的介绍以个人理解为主，部分源码验证为辅。"),a("br"),t._v("\n还是那句话，多思考多总结，不管结论是否正确，结果是否所期望，过程中的收获也会让人成长。")])])},[],!1,null,null,null);s.default=e.exports}}]);